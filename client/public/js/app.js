var Booking;Booking=angular.module("Booking",["ui.router","angularUtils.directives.dirPagination"]),Booking.config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/home"),e.state("home",{url:"/home",templateUrl:"/templates/views/index.html",controller:"HomeController"}).state("booking",{url:"/booking/:querry",templateUrl:"/templates/booking.html"}).state("reserve",{url:"/reserve/:roomdetails",templateUrl:"/templates/views/reserve.html",controller:"ReserveController"}).state("payment",{url:"/payment",templateUrl:"/templates/views/payment.html",controller:"paymentController"}).state("Confirmation",{url:"/Confirmation",templateUrl:"/templates/views/paymentConfirmation.html",controller:"confirmationController"}).state("thanknote",{url:"/thanknote/:reservationid",templateUrl:"/templates/views/thanknote.html",controller:"thanknoteController"}).state("guestinfo",{url:"/guestinfo",templateUrl:"/templates/views/profile.html",controller:"guestController"})}]);
Booking.factory("CompanyService",["$http",function(n){return{data:function(t){n.get("/api/company").success(function(n,c){t(n)})}}}]);
Booking.factory("CustomerService",["$http",function(t){return{data:function(c){t.get("/api/customer").success(function(t,n){c(t)})}}}]);
Booking.service("DataService",["$http",function(o){var t=[];this.save=function(o){t.push(o),console.log("data Saved"),console.log(t)},this.get=function(){return t}}]);
Booking.factory("InventoryService",["$http",function(s){var t=10001;return{results:[],data:function(t){s.get("/api/inventory").success(function(s,n){t(s)})},query:function(n,i){s.post("/api/availability/"+t,n).success(function(s,t){this.results=s,i(s)}.bind(this))},addRoom:function(t,n){t.company_id=10001,s.post("/admin/room",t).success(function(s,t){this.results="success",n(s)}.bind(this))},getRooms:function(n){s.get("/admin/rooms/"+t).success(function(s,t){this.results=s,n(s)}.bind(this))}}}]);
Booking.factory("LoginService",["$http","$rootScope","$window",function(o,e,n){return{auth:function(r,s){o.post("/api/login",r).success(function(o,r){n.sessionStorage.token=o.token,n.sessionStorage.role=o.role,n.sessionStorage.user=o.username,e.loggedIn=!0,s(o,r)}).error(function(){console.log("error")})},user:function(){var o="";return o=n.sessionStorage.role,console.log("user role "+o),o},logout:function(){e.loggedIn=null,delete n.sessionStorage.token,delete n.sessionStorage.role,delete n.sessionStorage.user,n.location.href="login.html"}}}]);
Booking.factory("PoliciesService",["$http",function(i){return{data:function(c){i.get("/api/policies").success(function(i,t){c(i)})}}}]);
Booking.factory("ReservationService",["$http",function(n){var e={};return e.data=function(){return n.get("/api/reservation")},e.query=function(e){return n.get("/api/reservation")},e.create=function(e){return n.post("/api/reservation",e)},e.pendingReservations=function(){return n.get("/admin/PendingReservations")},e.confirmReservation=function(e){return n.post("/admin/Confirmreservation",e)},e.confirmCheckin=function(e){return n.post("/admin/Confirmcheckin",e)},e.confirmCheckout=function(e){return n.post("/admin/confirmCheckout",e)},e.Todaycheckins=function(){return n.get("/admin/todayCheckins")},e.Todaycheckouts=function(){return n.get("/admin/todayCheckOuts")},e.GuestCheckedin=function(){return n.get("/Admin/GuestCheckedin")},e}]);
Booking.factory("RoleService",["$http",function(t){return{data:function(n){t.get("/api/role").success(function(t,o){n(t)})}}}]);
Booking.factory("UsersService",["$http","$window",function(s,e){return{data:function(e){s.get("/api/users").success(function(s,n){e(s)})},createUser:function(e,n){e.company_id=10001,s.post("/admin/CreateUser",e).success(function(s,e){this.results="success",n(s)}.bind(this))},getUsers:function(e){var n=10001;s.get("/admin/users/"+n).success(function(s,n){e(s)})},getUser:function(n){var t=e.sessionStorage.user;s.get("/admin/user/"+t).success(function(s,e){n(s)})}}}]);
Booking.directive("availability",["$rootScope","dateFilter",function(e,o){return{restrict:"E",templateUrl:"/templates/directives/availability.html",controller:["$scope","$location","ReservationService","$stateParams","DataService",function(e,o,r,t,s){e.selectedrooms=[],e.number=-1,e.querry=angular.fromJson(atob(t.querry)),e.selectroom=function(o,r){var t={};t.id=o,t.room=r,r.selected=!0,e.selectedrooms.push(t),e.number=o,console.log(e.selectedrooms)},e.removeroom=function(o){for(i in e.selectedrooms)e.selectedrooms[i].id==o&&e.selectedrooms.splice(i,1)},e.book=function(){var r={};r.selectedrooms=e.selectedrooms,r.querry=e.querry,r.companyid=e.selectedrooms[0].room.company_id,r.id="bookinginfo";var t=btoa(angular.toJson(r));s.save(r),o.path("/reserve/"+t)},e.submit=function(){r.query(e.query).success(function(e){}).error(function(e){alert("Errror "+e.message)})}}]}}]);
Booking.directive("footerNav",[function(){return{restrict:"E",scope:{},transclude:!0,templateUrl:"/templates/directives/footer.html",controller:"FooterController"}}]);
Booking.directive("home",[function(){return{restrict:"E",templateUrl:"/templates/home.html"}}]);
Booking.directive("errSrc",function(){return{link:function(r,c,e){c.bind("error",function(){e.src!=e.errSrc&&e.$set("src",e.errSrc)}),e.$observe("ngSrc",function(r){!r&&e.errSrc&&e.$set("src",e.errSrc)})}}});
Booking.directive("ngFileModel",[function(){return{scope:{ngFileModel:"="},link:function(e,t,i){t.bind("change",function(t){var i=new FileReader;i.onload=function(i){e.$apply(function(){e.ngFileModel={lastModified:t.target.files[0].lastModified,lastModifiedDate:t.target.files[0].lastModifiedDate,name:t.target.files[0].name,size:t.target.files[0].size,type:t.target.files[0].type,data:i.target.result}})},i.readAsDataURL(t.target.files[0])})}}}]);
Booking.directive("inventory",[function(){return{restrict:"E",templateUrl:"/templates/inventory.html"}}]);
Booking.directive("leftNav",[function(){return{restrict:"A",scope:{},transclude:!0,templateUrl:"/templates/directives/left_nav.html",controller:"LeftNavController"}}]);
Booking.directive("login",[function(){return{restrict:"E",scope:{},transclude:!0,templateUrl:"/templates/directives/login.html",controller:"LoginController"}}]);
Booking.directive("policies",[function(){return{restrict:"E",scope:{},transclude:!0,templateUrl:"/templates/directives/policies.html",controller:"PoliciesController"}}]);
Booking.directive("query",["$rootScope","dateFilter","$location",function(t,e,o){return{restrict:"E",templateUrl:"/templates/directives/query.html",controller:["$scope","InventoryService",function(e,r){e.max_adults=[1,2,3],e.max_childs=[0,1,2,3],e.query={adults:1,childs:0,check_in:(new moment).toDate(),check_out:(new moment).add(3,"days").toDate()},e.submit=function(){r.query(e.query,function(e){t.$broadcast("query:results")});var n=btoa(angular.toJson(e.query));o.path("/booking/"+n)}}]}}]);
Booking.directive("resNav",[function(){return{restrict:"E",scope:{},transclude:!0,templateUrl:"/templates/directives/res-nav.html",controller:"ResController"}}]);
Booking.directive("topNav",[function(){return{restrict:"E",scope:{},transclude:!0,templateUrl:"/templates/directives/header.html",controller:"HeaderController"}}]);
Booking.directive("users",[function(){return{restrict:"E",templateUrl:"/templates/users.html"}}]);
Booking.directive("user_profile",[function(){return{restrict:"E",templateUrl:"/templates/user_profile.html"}}]);
Booking.controller("AdminInventoryController",["$rootScope","InventoryService","ngDialog","$scope",function(o,e,t,n){this.results=e.results,o.$on("query:results",function(){this.results=e.results}.bind(this)),e.getRooms(function(o){n.rooms=o.result}),n.viewroom=function(o){n.room=o,t.open({template:"roomtmpl",className:"ngdialog-theme-default",scope:n})},n.addRoom=function(){t.openConfirm({template:"addroomstmpl",className:"ngdialog-theme-default",scope:n,preCloseCallback:function(o){return confirm("Are you sure you want to close without saving your changes?")?!0:!1}}).then(function(o){n.room=o,n.room.status="Active",e.addRoom(n.room,function(o){if(console.log(o),"success"==o.status){var e="<p>Room Successfully Created</p>";n.rooms.push(n.room)}else var e="<p>Error Saving Room</p>";t.open({template:e,plain:!0})})},function(o){})}}]);
Booking.controller("CalendarController",["$scope","$compile","uiCalendarConfig",function(e,t,n){var a=new Date,l=a.getDate(),r=a.getMonth(),o=a.getFullYear();e.changeTo="Hungarian",e.eventSource={url:"http://www.google.com/calendar/feeds/usa__en%40holiday.calendar.google.com/public/basic",className:"gcal-event",currentTimezone:"America/Chicago"},e.events=[{title:"All Day Event",start:new Date(o,r,1)},{title:"Long Event",start:new Date(o,r,l-5),end:new Date(o,r,l-2)},{id:999,title:"Repeating Event",start:new Date(o,r,l-3,16,0),allDay:!1},{id:999,title:"Repeating Event",start:new Date(o,r,l+4,16,0),allDay:!1},{title:"Birthday Party",start:new Date(o,r,l+1,19,0),end:new Date(o,r,l+1,22,30),allDay:!1},{title:"Click for Google",start:new Date(o,r,28),end:new Date(o,r,29),url:"http://google.com/"}],e.eventsF=function(e,t,n,a){var l=new Date(e).getTime()/1e3,r=(new Date(t).getTime()/1e3,new Date(e).getMonth()),o=[{title:"Feed Me "+r,start:l+5e4,end:l+1e5,allDay:!1,className:["customFeed"]}];a(o)},e.calEventsExt={color:"#f00",textColor:"yellow",events:[{type:"party",title:"Lunch",start:new Date(o,r,l,12,0),end:new Date(o,r,l,14,0),allDay:!1},{type:"party",title:"Lunch 2",start:new Date(o,r,l,12,0),end:new Date(o,r,l,14,0),allDay:!1},{type:"party",title:"Click for Google",start:new Date(o,r,28),end:new Date(o,r,29),url:"http://google.com/"}]},e.alertOnEventClick=function(t,n,a){e.alertMessage=t.title+" was clicked "},e.alertOnDrop=function(t,n,a,l,r,o){e.alertMessage="Event Droped to make dayDelta "+n},e.alertOnResize=function(t,n,a,l,r,o){e.alertMessage="Event Resized to make dayDelta "+n},e.addEvent=function(){e.events.push({title:"Open Sesame",start:new Date(o,r,28),end:new Date(o,r,29),className:["openSesame"]})},e.remove=function(t){e.events.splice(t,1)},e.changeView=function(e,t){n.calendars[t].fullCalendar("changeView",e)},e.renderCalender=function(e){n.calendars[e]&&n.calendars[e].fullCalendar("render")},e.eventRender=function(n,a,l){a.attr({tooltip:n.title,"tooltip-append-to-body":!0}),t(a)(e)},e.uiConfig={calendar:{height:450,editable:!0,header:{left:"title",center:"",right:"today prev,next"},eventClick:e.alertOnEventClick,eventDrop:e.alertOnDrop,eventResize:e.alertOnResize,eventRender:e.eventRender}},e.eventSources=[e.events,e.eventSource,e.eventsF],e.eventSources2=[e.calEventsExt,e.eventsF,e.events]}]);
Booking.controller("confirmationController",["DataService","$location","$scope","ReservationService",function(o,r,n,i){n.formData=o.get(),n.guestinfo=_.findWhere(n.formData,{id:"guestinfo"}).customerProfile,n.cardinfo=_.findWhere(n.formData,{id:"paymentinfo"}).paymentDetails,n.bookinginfo=_.findWhere(n.formData,{id:"bookinginfo"}).selectedrooms,n.guestSummary=_.findWhere(n.formData,{id:"bookinginfo"}).querry,n.roomsSummary=_.findWhere(n.formData,{id:"roominfo"}).summary,n.company_id=_.findWhere(n.formData,{id:"bookinginfo"}).companyid,n.processForm=function(){var o={};o.guestinfo=n.guestinfo,o.cardinfo=n.cardinfo,o.bookinginfo=n.bookinginfo,o.guestSummary=n.guestSummary,o.roomSummary=n.roomsSummary,o.company_id=n.company_id,i.create(o).success(function(o){console.log(o),n.formData="",r.path("/thanknote/"+o.success)}).error(function(o){alert("Errror "+o)})}}]);
Booking.controller("CustomerController",["CustomerService",function(o){this.customer=null,this.data="Booking Customer";var t=this;CustomerService.data(function(o){t.customer=o,console.log(o)})}]);
Booking.controller("FooterController",["$scope",function(o){}]);
Booking.controller("guestController",["DataService","$state","$scope",function(o,t,e){e.formData={},e.payment=function(){var a={};a.id="guestinfo",a.customerProfile=e.formData,o.save(a),t.go("payment")}}]);
Booking.controller("HeaderController",["$scope",function(o){}]);
Booking.controller("HomeController",["CompanyService","ReservationService","$scope","ngDialog","InventoryService",function(e,n,t,o,c){this.company=null,this.data="Booking Home";var i=this;e.data(function(e){i.company=e,t.query={adults:1,childs:0,check_in:(new moment).toDate(),check_out:(new moment).add(3,"days").toDate()},c.query(t.query,function(e){t.availability=e})}),n.pendingReservations().success(function(e){t.pendingConfirmation=e.result}).error(function(e){t.pendingConfirmation=[]}),n.Todaycheckins().success(function(e){t.Todaycheckins=e.result}).error(function(e){t.Todaycheckins=[]}),n.Todaycheckouts().success(function(e){t.Todaycheckouts=e.result}).error(function(e){t.Todaycheckouts=[]}),n.GuestCheckedin().success(function(e){t.GuestCheckedin=e.result}).error(function(e){t.GuestCheckedin=[]}),t.viewdetails=function(e){t.cust=e,o.openConfirm({template:"customertmpl",className:"ngdialog-theme-default",scope:t}).then(function(e){n.confirmReservation(t.cust).success(function(e){o.open({template:"<p>Reservation Updated</p>",plain:!0}),t.pendingConfirmation.splice(t.pendingConfirmation.indexOf(t.cust),1)}).error(function(e){o.open({template:"<p>Error Updating Reservation </p>",plain:!0})})},function(e){})},t.checkin=function(e){t.client=e,o.openConfirm({template:"checkinmpl",className:"ngdialog-theme-default",scope:t}).then(function(e){n.confirmCheckin(t.client).success(function(e){o.open({template:"<p>Client Reservation Updated to Checked in </p>",plain:!0}),t.Todaycheckins.splice(t.Todaycheckins.indexOf(t.client),1)}).error(function(e){o.open({template:"<p>Error Updating Client Reservation Status</p>",plain:!0})})},function(e){})},t.checkout=function(e){t.checkout=e,o.openConfirm({template:"checkoutmpl",className:"ngdialog-theme-default",scope:t}).then(function(e){n.confirmCheckout(t.checkout).success(function(e){o.open({template:"<p>Client Reservation Updated to Checked-OUT </p>",plain:!0}),t.Todaycheckouts.splice(t.Todaycheckouts.indexOf(t.checkout),1)}).error(function(e){o.open({template:"<p>Error Updating Client Reservation Status</p>",plain:!0})})},function(e){})}}]);
Booking.controller("InventoryController",["$rootScope","InventoryService","$scope",function(o,t,s){this.results=t.results,o.$on("query:results",function(){this.results=t.results}.bind(this)),t.getRooms(function(o){s.rooms=o.result})}]);
Booking.controller("LeftNavController",["$scope",function(o){}]);
Booking.controller("LoginController",["$rootScope","$scope","$window","LoginService",function(o,n,e,t){n.submit=function(){t.auth(n.user,function(n,t){200===t?(e.sessionStorage.token=n.token,o.loggedIn=n,e.location.href="/Admin.html"):delete e.sessionStorage.token})}}]);
Booking.controller("LogoutController",["$location","LoginService",function(o,n){n.logout(),o.path("/login")}]);
Booking.controller("paymentController",["DataService","$state","$scope",function(o,t,a){a.formData={},a.gotoConfirm=function(){var n={};n.id="paymentinfo",n.paymentDetails=a.formData,o.save(n),t.go("Confirmation")}}]);
Booking.controller("PoliciesController",["$rootScope","$scope","$location",function(o,i,c){i.policies=function(o){return policies.show=!0}}]);
Booking.controller("ResController",["$scope",function(o){}]);
Booking.controller("ReservationController",["ReservationService",function(o){this.reservation=null,this.data="Booking Rerservation";var e=this;RoleService.data(function(o){e.reservation=o,console.log(o)})}]);
Booking.controller("ReserveController",["$scope","$stateParams","$state","ReservationService","DataService","$anchorScroll","$location",function(o,r,a,e,t,m,s){s.hash("top"),m(),o.formData={},o.formData.roomDetails=angular.fromJson(atob(r.roomdetails)),o.summary={},o.summary.noRooms=o.formData.roomDetails.selectedrooms.length,o.summary.noGuest=o.formData.roomDetails.querry.adults,o.summary.startdate=o.formData.roomDetails.querry.check_in,o.summary.enddate=o.formData.roomDetails.querry.check_out,o.totalprice=function(){for(var r=0,a=0;a<o.summary.noRooms;a++)r+=o.formData.roomDetails.selectedrooms[a].room.base_price;return r},o.summary.tPrice=o.totalprice(),o.processForm=function(){e.create(o.formData).success(function(r){alert("data saved Reservation ID 9889"),o.formData=""}).error(function(o){alert("Errror "+o.message)})},o.proceed=function(){var r={};r.id="roominfo",r.roomdetails=o.formData,r.summary=o.summary,t.save(r),a.go("guestinfo")}}]);
Booking.controller("ReservePaymentController",["ReservationService",function(e){}]);
Booking.controller("bookingController",["ReservationService",function(o){}]);
Booking.controller("RoleController",["RoleService",function(o){this.role=null,this.data="Booking User Role";var l=this;o.data(function(o){l.role=o,console.log(o)})}]);
Booking.controller("thanknoteController",["$location","$scope","$stateParams",function(o,n,t){n.reservationid=t.reservationid}]);
Booking.controller("UserProfileController",["UsersService","$scope","$rootScope",function(o,e,r){o.getUser(function(o){console.log(o),e.userdetails=o.result})}]);
Booking.controller("UsersController",["UsersService","$scope","ngDialog",function(e,s,r){this.users=null,this.data="Booking Users";e.getUsers(function(e){s.users=e.result,console.log(e.result)}),s.roles=[{name:"user",id:1},{name:"admin",id:2}],s.adduser=function(){r.openConfirm({template:"usertmpl",className:"ngdialog-theme-default",scope:s}).then(function(n){s.user=n,console.log(n),e.createUser(s.user,function(e){if("ok"==e.sucess){var n="<p>User Successfully Created</p>";s.users.push(s.user)}else var n="<p>Error Creating User </p>";r.open({template:n,plain:!0})})},function(e){})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbXBhbnkuanMiLCJjdXN0b21lci5qcyIsIkRhdGFTZXJ2aWNlLmpzIiwiaW52ZW50b3J5LmpzIiwibG9naW4uanMiLCJwb2xpY2llcy5qcyIsInJlc2VydmF0aW9uLmpzIiwicm9sZS5qcyIsInVzZXJzLmpzIiwiYXZhaWxhYmlsaXR5LmpzIiwiZm9vdGVyX25hdi5qcyIsImhvbWUuanMiLCJpbWFnZUVycm9yLmpzIiwiaW5wdXRmaWxlLmpzIiwibGVmdF9uYXYuanMiLCJxdWVyeS5qcyIsInJlel9uYXYuanMiLCJ0b3BfbmF2LmpzIiwidXNlcl9wcm9maWxlLmpzIiwiQWRtaW5JbnZlbnRvcnlDb250cm9sbGVyLmpzIiwiY2FsZW5kZXIuanMiLCJjb25maXJtYXRpb25Db250cm9sbGVyLmpzIiwiZm9vdGVyLmpzIiwiZ3Vlc3RDb250cm9sbGVyLmpzIiwiaGVhZGVyLmpzIiwibG9nb3V0LmpzIiwicGF5bWVudENvbnRyb2xsZXIuanMiLCJyZXMtaGVhZGVyLmpzIiwiUmVzZXJ2ZUNvbnRyb2xsZXIuanMiLCJSZXNlcnZlUGF5bWVudENvbnRyb2xsZXIuanMiLCJSZXNlcnZlUHJvZmlsZUNvbnRyb2xsZXIuanMiLCJ0aGFua25vdGVDb250cm9sbGVyLmpzIiwidXNlclByb2ZpbGUuanMiXSwibmFtZXMiOlsiQm9va2luZyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiZmFjdG9yeSIsIiRodHRwIiwiZGF0YSIsImNhbGxiYWNrIiwiZ2V0Iiwic3VjY2VzcyIsInN0YXR1cyIsInNlcnZpY2UiLCJ0aGlzIiwic2F2ZSIsImR0IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJjb21wYW55X2lkIiwicmVzdWx0cyIsInF1ZXJ5IiwicG9zdCIsImJpbmQiLCJhZGRSb29tIiwicm9vbSIsImdldFJvb21zIiwiJHJvb3RTY29wZSIsIiR3aW5kb3ciLCJhdXRoIiwiY3JlZGVudGlhbHMiLCJzZXNzaW9uU3RvcmFnZSIsInRva2VuIiwicm9sZSIsInVzZXIiLCJ1c2VybmFtZSIsImxvZ2dlZEluIiwiZXJyb3IiLCJsb2dvdXQiLCJsb2NhdGlvbiIsImhyZWYiLCJyZXNlcnZhdGlvbiIsInF1ZXJyeSIsImNyZWF0ZSIsInBlbmRpbmdSZXNlcnZhdGlvbnMiLCJjb25maXJtUmVzZXJ2YXRpb24iLCJjb25maXJtQ2hlY2tpbiIsImNvbmZpcm1DaGVja291dCIsIlRvZGF5Y2hlY2tpbnMiLCJUb2RheWNoZWNrb3V0cyIsIkd1ZXN0Q2hlY2tlZGluIiwiY3JlYXRlVXNlciIsImdldFVzZXJzIiwiZ2V0VXNlciIsImRpcmVjdGl2ZSIsImRhdGVGaWx0ZXIiLCJyZXN0cmljdCIsIiRzY29wZSIsIiRsb2NhdGlvbiIsIlJlc2VydmF0aW9uU2VydmljZSIsIiRzdGF0ZVBhcmFtcyIsIkRhdGFTZXJ2aWNlIiwic2VsZWN0ZWRyb29tcyIsIm51bWJlciIsImZyb21Kc29uIiwiYXRvYiIsInNlbGVjdHJvb20iLCJpbmRleCIsInJtIiwiaWQiLCJzZWxlY3RlZCIsInJlbW92ZXJvb20iLCJpIiwic3BsaWNlIiwiYm9vayIsImsiLCJjb21wYW55aWQiLCJkZXQiLCJidG9hIiwidG9Kc29uIiwicGF0aCIsInN1Ym1pdCIsImFsZXJ0IiwibWVzc2FnZSIsInNjb3BlIiwidHJhbnNjbHVkZSIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJzcmMiLCJlcnJTcmMiLCIkc2V0IiwiJG9ic2VydmUiLCJ2YWx1ZSIsIm5nRmlsZU1vZGVsIiwiYXR0cmlidXRlcyIsImNoYW5nZUV2ZW50IiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImxvYWRFdmVudCIsIiRhcHBseSIsImxhc3RNb2RpZmllZCIsInRhcmdldCIsImZpbGVzIiwibGFzdE1vZGlmaWVkRGF0ZSIsIm5hbWUiLCJzaXplIiwidHlwZSIsInJlc3VsdCIsInJlYWRBc0RhdGFVUkwiLCJJbnZlbnRvcnlTZXJ2aWNlIiwibWF4X2FkdWx0cyIsIm1heF9jaGlsZHMiLCJhZHVsdHMiLCJjaGlsZHMiLCJjaGVja19pbiIsIm1vbWVudCIsInRvRGF0ZSIsImNoZWNrX291dCIsImFkZCIsIiRicm9hZGNhc3QiLCJuZ0RpYWxvZyIsIiRvbiIsInJvb21zIiwidmlld3Jvb20iLCJvcGVuIiwidGVtcGxhdGUiLCJjbGFzc05hbWUiLCJvcGVuQ29uZmlybSIsInByZUNsb3NlQ2FsbGJhY2siLCJjb25maXJtIiwidGhlbiIsInRlbXAiLCJwbGFpbiIsInJlYXNvbiIsIiRjb21waWxlIiwidWlDYWxlbmRhckNvbmZpZyIsImRhdGUiLCJEYXRlIiwiZCIsImdldERhdGUiLCJtIiwiZ2V0TW9udGgiLCJ5IiwiZ2V0RnVsbFllYXIiLCJjaGFuZ2VUbyIsImV2ZW50U291cmNlIiwiY3VycmVudFRpbWV6b25lIiwiZXZlbnRzIiwidGl0bGUiLCJzdGFydCIsImVuZCIsImFsbERheSIsImV2ZW50c0YiLCJ0aW1lem9uZSIsInMiLCJnZXRUaW1lIiwiY2FsRXZlbnRzRXh0IiwiY29sb3IiLCJ0ZXh0Q29sb3IiLCJhbGVydE9uRXZlbnRDbGljayIsImpzRXZlbnQiLCJ2aWV3IiwiYWxlcnRNZXNzYWdlIiwiYWxlcnRPbkRyb3AiLCJldmVudCIsImRlbHRhIiwicmV2ZXJ0RnVuYyIsInVpIiwiYWxlcnRPblJlc2l6ZSIsImFkZEV2ZW50IiwicmVtb3ZlIiwiY2hhbmdlVmlldyIsImNhbGVuZGFyIiwiY2FsZW5kYXJzIiwiZnVsbENhbGVuZGFyIiwicmVuZGVyQ2FsZW5kZXIiLCJldmVudFJlbmRlciIsImF0dHIiLCJ0b29sdGlwIiwidG9vbHRpcC1hcHBlbmQtdG8tYm9keSIsInVpQ29uZmlnIiwiaGVpZ2h0IiwiZWRpdGFibGUiLCJoZWFkZXIiLCJsZWZ0IiwiY2VudGVyIiwicmlnaHQiLCJldmVudENsaWNrIiwiZXZlbnREcm9wIiwiZXZlbnRSZXNpemUiLCJldmVudFNvdXJjZXMiLCJldmVudFNvdXJjZXMyIiwiZm9ybURhdGEiLCJndWVzdGluZm8iLCJfIiwiZmluZFdoZXJlIiwiY3VzdG9tZXJQcm9maWxlIiwiY2FyZGluZm8iLCJwYXltZW50RGV0YWlscyIsImJvb2tpbmdpbmZvIiwiZ3Vlc3RTdW1tYXJ5Iiwicm9vbXNTdW1tYXJ5Iiwic3VtbWFyeSIsInByb2Nlc3NGb3JtIiwicm9vbVN1bW1hcnkiLCJyZXNwIiwiVXNlcnNTZXJ2aWNlIiwiY3VzdG9tZXIiLCJfc2VsZiIsIkN1c3RvbWVyU2VydmljZSIsIiRzdGF0ZSIsInBheW1lbnQiLCJnbyIsIkNvbXBhbnlTZXJ2aWNlIiwiY29tcGFueSIsImF2YWlsYWJpbGl0eSIsInBlbmRpbmdDb25maXJtYXRpb24iLCJ2aWV3ZGV0YWlscyIsImN1c3QiLCJpbmRleE9mIiwiY2hlY2tpbiIsImNsaWVudCIsImNoZWNrb3V0IiwiY3VzbSIsIkxvZ2luU2VydmljZSIsImdvdG9Db25maXJtIiwicG9saWNpZXMiLCJzaG93IiwiUm9sZVNlcnZpY2UiLCIkYW5jaG9yU2Nyb2xsIiwiaGFzaCIsInJvb21EZXRhaWxzIiwicm9vbWRldGFpbHMiLCJub1Jvb21zIiwibGVuZ3RoIiwibm9HdWVzdCIsInN0YXJ0ZGF0ZSIsImVuZGRhdGUiLCJ0b3RhbHByaWNlIiwidHByaWNlIiwiYmFzZV9wcmljZSIsInRQcmljZSIsInByb2NlZWQiLCJyZXNlcnZhdGlvbmlkIiwidXNlcmRldGFpbHMiLCJ1c2VycyIsInJvbGVzIiwiYWRkdXNlciIsInN1Y2VzcyJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsUUFFSkEsU0FBVUMsUUFBUUMsT0FBTyxXQUFZLFlBQVksMENBRWpERixRQUFRRyxRQUFRLGlCQUFrQixxQkFBc0IsU0FBU0MsRUFBZ0JDLEdBRWpGQSxFQUFtQkMsVUFBVSxTQUV6QkYsRUFDSUcsTUFBTSxRQUNIQyxJQUFLLFFBQ0pDLFlBQWEsOEJBQ2JDLFdBQVksbUJBRWhCSCxNQUFNLFdBQ0hDLElBQUssbUJBQ0pDLFlBQWEs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UUFBUXJDLEdBQUssSUFHdEJaLEVBQU9nTSxRQUFRLFdBRUQvSCxFQUFTTyxhQUNMRixTQUFVLFdBQ1ZDLFVBQVcseUJBQ1g1QyxNQUFPM0IsSUFDUjJFLEtBQUssU0FBVXZDLEdBQ2pCcEMsRUFBT3ZCLEtBQUsyRCxFQUNaNUUsUUFBUUMsSUFBSTJFLEdBQ0ptSCxFQUFhN0osV0FBV00sRUFBT3ZCLEtBQUssU0FBU2QsR0FFbEQsR0FBb0IsTUFBaEJBLEVBQVFzTyxPQUFhLENBQUUsR0FBSXJILEdBQU0sa0NBQzlCNUUsR0FBTzhMLE1BQU12TyxLQUFLeUMsRUFBT3ZCLFVBRTFCLElBQUltRyxHQUFNLDZCQUVUWCxHQUFTSSxNQUNOQyxTQUFVTSxFQUNWQyxPQUFPLE9BUWxCLFNBQVVDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBCb29raW5nO1xuXG5Cb29raW5nID0gYW5ndWxhci5tb2R1bGUoJ0Jvb2tpbmcnLCBbJ3VpLnJvdXRlcicsJ2FuZ3VsYXJVdGlscy5kaXJlY3RpdmVzLmRpclBhZ2luYXRpb24nXSk7XG5cbkJvb2tpbmcuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcil7XG4gXG4kdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvaG9tZScpO1xuIFxuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICAgICB1cmw6ICcvaG9tZScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvdmlld3MvaW5kZXguaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXInXG4gICAgICAgIH0pXG4gICAgICAgLnN0YXRlKCdib29raW5nJywge1xuICAgICAgICAgICB1cmw6ICcvYm9va2luZy86cXVlcnJ5JyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9ib29raW5nLmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgXG4gICAgICAgIC5zdGF0ZSgncmVzZXJ2ZScsIHtcbiAgICAgICAgICAgdXJsOiAnL3Jlc2VydmUvOnJvb21kZXRhaWxzJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy92aWV3cy9yZXNlcnZlLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1Jlc2VydmVDb250cm9sbGVyJ1xuICAgICAgICB9KSBcbiAgICAgICAgLnN0YXRlKCdwYXltZW50Jywge1xuICAgICAgICAgICAgdXJsOiAnL3BheW1lbnQnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdGVtcGxhdGVzL3ZpZXdzL3BheW1lbnQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAncGF5bWVudENvbnRyb2xsZXInXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnQ29uZmlybWF0aW9uJywge1xuICAgICAgICAgICAgdXJsOiAnL0NvbmZpcm1hdGlvbicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvdmlld3MvcGF5bWVudENvbmZpcm1hdGlvbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjb25maXJtYXRpb25Db250cm9sbGVyJ1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgndGhhbmtub3RlJywge1xuICAgICAgICAgICAgdXJsOiAnL3RoYW5rbm90ZS86cmVzZXJ2YXRpb25pZCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvdmlld3MvdGhhbmtub3RlLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ3RoYW5rbm90ZUNvbnRyb2xsZXInXG5cbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdndWVzdGluZm8nLCB7XG4gICAgICAgICAgICB1cmw6ICcvZ3Vlc3RpbmZvJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy92aWV3cy9wcm9maWxlLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2d1ZXN0Q29udHJvbGxlcidcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBcblxuICAgICAgICBcbiAgICAgICBcblxuXG59XSk7XG5cbiIsIkJvb2tpbmcuZmFjdG9yeSgnQ29tcGFueVNlcnZpY2UnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApe1xuICByZXR1cm4ge1xuICAgIGRhdGEgOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGh0dHAuZ2V0KCcvYXBpL2NvbXBhbnknKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpe1xuICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbn1dKTtcbiIsIkJvb2tpbmcuY29udHJvbGxlcignQ3VzdG9tZXJDb250cm9sbGVyJywgWydDdXN0b21lclNlcnZpY2UnLCBmdW5jdGlvbihVc2Vyc1NlcnZpY2Upe1xuICB0aGlzLmN1c3RvbWVyID0gbnVsbDtcbiAgdGhpcy5kYXRhID0gJ0Jvb2tpbmcgQ3VzdG9tZXInO1xuICB2YXIgX3NlbGYgPSB0aGlzO1xuXG4gIEN1c3RvbWVyU2VydmljZS5kYXRhKGZ1bmN0aW9uKGRhdGEpe1xuICAgIF9zZWxmLmN1c3RvbWVyID0gZGF0YTtcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgfSk7XG59XSk7IiwiQm9va2luZy5zZXJ2aWNlKCdEYXRhU2VydmljZScsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCl7XG5cblx0ICB2YXIgZGF0YT1bXVxuXG5cblx0ICAgdGhpcy5zYXZlPWZ1bmN0aW9uKGR0KXtcblx0ICAgICBcdGRhdGEucHVzaChkdCk7XG5cdCAgICAgXHRjb25zb2xlLmxvZyhcImRhdGEgU2F2ZWRcIik7XG5cdCAgICAgXHRjb25zb2xlLmxvZyhkYXRhKTtcblxuXHQgICB9XG5cdCAgIHRoaXMuZ2V0PWZ1bmN0aW9uKCl7XG5cdCAgIFx0cmV0dXJuIGRhdGE7XG5cdCAgIH1cblxuICAgICBcbn1dKTsiLCJCb29raW5nLmNvbnRyb2xsZXIoJ0ludmVudG9yeUNvbnRyb2xsZXInLCBbJyRyb290U2NvcGUnLCAnSW52ZW50b3J5U2VydmljZScsJyRzY29wZScsIGZ1bmN0aW9uKCRyb290U2NvcGUsIEludmVudG9yeVNlcnZpY2UsJHNjb3BlKXtcbiAgdGhpcy5yZXN1bHRzID0gSW52ZW50b3J5U2VydmljZS5yZXN1bHRzO1xuXG4gICRyb290U2NvcGUuJG9uKCdxdWVyeTpyZXN1bHRzJywgZnVuY3Rpb24oKXtcbiAgICB0aGlzLnJlc3VsdHMgPSBJbnZlbnRvcnlTZXJ2aWNlLnJlc3VsdHM7XG4gIH0uYmluZCh0aGlzKSk7XG5cblxuICAgICAgICAgICAgICAgICAgSW52ZW50b3J5U2VydmljZS5nZXRSb29tcyhmdW5jdGlvbihyZXN1bHRzKXtcblxuXHRcdFx0ICAgICAgICAgICRzY29wZS5yb29tcz1yZXN1bHRzLnJlc3VsdDtcblx0XHRcdCAgICAgICBcblx0XHRcdCAgICAgICAgfSk7XG5cblxuXG5cbn1dKTtcbiIsIkJvb2tpbmcuY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJywgWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckd2luZG93JywgJ0xvZ2luU2VydmljZScsXG4gIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHdpbmRvdywgTG9naW5TZXJ2aWNlKXtcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKXtcbiAgICAgIExvZ2luU2VydmljZS5hdXRoKCRzY29wZS51c2VyLCBmdW5jdGlvbihkYXRhLCBzdGF0dXMpe1xuICAgICAgICBpZiAoc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS50b2tlbiA9IGRhdGEudG9rZW47XG4gICAgICAgICAgJHJvb3RTY29wZS5sb2dnZWRJbiA9IGRhdGE7XG4gICAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmPScvQWRtaW4uaHRtbCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS50b2tlbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICB9XVxuKTtcblxuIiwiQm9va2luZy5jb250cm9sbGVyKCdQb2xpY2llc0NvbnRyb2xsZXInLCBbJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJGxvY2F0aW9uKXtcbiAgICAkc2NvcGUucG9saWNpZXMgPSBmdW5jdGlvbihzaG93KSB7XG4gICAgICByZXR1cm4gcG9saWNpZXMuc2hvdyA9IHRydWU7ICBcbiAgICB9O1xuICB9XG5dKTtcblxuIiwiQm9va2luZy5jb250cm9sbGVyKCdSZXNlcnZhdGlvbkNvbnRyb2xsZXInLCBbJ1Jlc2VydmF0aW9uU2VydmljZScsIGZ1bmN0aW9uKFJlc2VydmF0aW9uU2VydmljZSl7XG4gIHRoaXMucmVzZXJ2YXRpb24gPSBudWxsO1xuICB0aGlzLmRhdGEgPSAnQm9va2luZyBSZXJzZXJ2YXRpb24nO1xuICB2YXIgX3NlbGYgPSB0aGlzO1xuXG4gIFJvbGVTZXJ2aWNlLmRhdGEoZnVuY3Rpb24oZGF0YSl7XG4gICAgX3NlbGYucmVzZXJ2YXRpb24gPSBkYXRhO1xuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICB9KTtcbn1dKTsiLCJCb29raW5nLmNvbnRyb2xsZXIoJ1JvbGVDb250cm9sbGVyJywgWydSb2xlU2VydmljZScsIGZ1bmN0aW9uKFJvbGVTZXJ2aWNlKXtcbiAgdGhpcy5yb2xlID0gbnVsbDtcbiAgdGhpcy5kYXRhID0gJ0Jvb2tpbmcgVXNlciBSb2xlJztcbiAgdmFyIF9zZWxmID0gdGhpcztcblxuICBSb2xlU2VydmljZS5kYXRhKGZ1bmN0aW9uKGRhdGEpe1xuICAgIF9zZWxmLnJvbGUgPSBkYXRhO1xuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICB9KTtcbn1dKTsiLCJCb29raW5nLmNvbnRyb2xsZXIoJ1VzZXJzQ29udHJvbGxlcicsIFsnVXNlcnNTZXJ2aWNlJywnJHNjb3BlJywnbmdEaWFsb2cnLCBmdW5jdGlvbihVc2Vyc1NlcnZpY2UsJHNjb3BlLG5nRGlhbG9nKXtcbiAgdGhpcy51c2VycyA9IG51bGw7XG4gIHRoaXMuZGF0YSA9ICdCb29raW5nIFVzZXJzJztcbiAgdmFyIF9zZWxmID0gdGhpcztcbi8qXG4gIFVzZXJzU2VydmljZS5kYXRhKGZ1bmN0aW9uKGRhdGEpe1xuICAgIF9zZWxmLnVzZXJzID0gZGF0YTtcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgfSk7XG4qL1xuICBVc2Vyc1NlcnZpY2UuZ2V0VXNlcnMoZnVuY3Rpb24oZGF0YSl7XG4gICAgJHNjb3BlLnVzZXJzPWRhdGEucmVzdWx0O1xuICAgIGNvbnNvbGUubG9nKGRhdGEucmVzdWx0KTtcbiAgfSk7XG5cbiAgJHNjb3BlLnJvbGVzPVt7XCJuYW1lXCI6XCJ1c2VyXCIsXCJpZFwiOjF9LFxuICAge1wibmFtZVwiOlwiYWRtaW5cIixcImlkXCI6Mn1cbiAgXTtcblxuICAkc2NvcGUuYWRkdXNlcj1mdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgbmdEaWFsb2cub3BlbkNvbmZpcm0oe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJ3VzZXJ0bXBsJyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbmdkaWFsb2ctdGhlbWUtZGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiAkc2NvcGVcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIFx0JHNjb3BlLnVzZXI9dmFsdWU7XG4gICAgICAgICAgICAgICAgXHRjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgVXNlcnNTZXJ2aWNlLmNyZWF0ZVVzZXIoJHNjb3BlLnVzZXIsZnVuY3Rpb24ocmVzdWx0cyl7XG4gICAgICAgICAgICAgICAgXHRcdFxuICAgICAgICAgICAgICAgIFx0XHQgIGlmIChyZXN1bHRzLnN1Y2Vzcz09XCJva1wiKXsgdmFyIHRlbXAgPSc8cD5Vc2VyIFN1Y2Nlc3NmdWxseSBDcmVhdGVkPC9wPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnMucHVzaCgkc2NvcGUudXNlcik7XG4gICAgICAgICAgICAgICAgXHRcdH1cbiAgICAgICAgICAgICAgICBcdFx0ICBlbHNleyB2YXIgdGVtcCA9JzxwPkVycm9yIENyZWF0aW5nIFVzZXIgPC9wPic7fVxuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdEaWFsb2cub3Blbih7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFpbjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgXG5cblx0XHRcdCAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIFx0fVxuXG5cbiAgICAgICAgICAgICAgICBcdCwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KTtcblxuICB9XG59XSk7XG5cbiAiLCJCb29raW5nLmRpcmVjdGl2ZSgnYXZhaWxhYmlsaXR5JywgWyckcm9vdFNjb3BlJywgJ2RhdGVGaWx0ZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCBkYXRlRmlsdGVyKXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdCAgICA6ICdFJyxcbiAgICB0ZW1wbGF0ZVVybCA6ICcvdGVtcGxhdGVzL2RpcmVjdGl2ZXMvYXZhaWxhYmlsaXR5Lmh0bWwnLFxuICAgIGNvbnRyb2xsZXIgIDogWyckc2NvcGUnLCckbG9jYXRpb24nLCdSZXNlcnZhdGlvblNlcnZpY2UnLCckc3RhdGVQYXJhbXMnLCdEYXRhU2VydmljZScsIGZ1bmN0aW9uKCRzY29wZSwkbG9jYXRpb24sUmVzZXJ2YXRpb25TZXJ2aWNlLCRzdGF0ZVBhcmFtcyxEYXRhU2VydmljZSl7XG4gICAgICBcbiAgICAgICRzY29wZS5zZWxlY3RlZHJvb21zPVtdO1xuICAgICAgJHNjb3BlLm51bWJlcj0tMTtcbiAgJHNjb3BlLnF1ZXJyeT0gYW5ndWxhci5mcm9tSnNvbihhdG9iKCRzdGF0ZVBhcmFtcy5xdWVycnkpKVxuICAgICBcblxuJHNjb3BlLnNlbGVjdHJvb209ZnVuY3Rpb24oaW5kZXgscm9vbSl7XG4gICB2YXIgcm09e307XG4gICAgcm0uaWQ9aW5kZXg7XG4gICAgcm0ucm9vbT1yb29tO1xuICAgIHJvb20uc2VsZWN0ZWQ9dHJ1ZTtcbiAgICAkc2NvcGUuc2VsZWN0ZWRyb29tcy5wdXNoKHJtKTtcbiAgICAkc2NvcGUubnVtYmVyPWluZGV4O1xuICAgIGNvbnNvbGUubG9nKCRzY29wZS5zZWxlY3RlZHJvb21zKVxufTtcbiRzY29wZS5yZW1vdmVyb29tPWZ1bmN0aW9uKGluZGV4KXtcblxuICAgZm9yIChpIGluICRzY29wZS5zZWxlY3RlZHJvb21zKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnNlbGVjdGVkcm9vbXNbaV0uaWQgPT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRyb29tcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbn07XG5cbiRzY29wZS5ib29rPWZ1bmN0aW9uKCl7XG4gIHZhciBrPXt9O1xuICAgICBrLnNlbGVjdGVkcm9vbXM9JHNjb3BlLnNlbGVjdGVkcm9vbXM7XG4gICAgIGsucXVlcnJ5PSRzY29wZS5xdWVycnk7XG4gICAgIGsuY29tcGFueWlkPSRzY29wZS5zZWxlY3RlZHJvb21zWzBdLnJvb20uY29tcGFueV9pZDtcbiAgICAgay5pZD0nYm9va2luZ2luZm8nO1xuICAgdmFyIGRldD1idG9hKGFuZ3VsYXIudG9Kc29uKGspKTtcbiAgIERhdGFTZXJ2aWNlLnNhdmUoayk7XG4gICRsb2NhdGlvbi5wYXRoKCcvcmVzZXJ2ZS8nK2RldCk7XG4gIFxufTtcblxuICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICBSZXNlcnZhdGlvblNlcnZpY2UucXVlcnkoJHNjb3BlLnF1ZXJ5KVxuICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJycm9yIFwiK2Vycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgXG4gICAgICB9O1xuICAgIH1dXG4gIH07XG59XSk7IiwiQm9va2luZy5kaXJlY3RpdmUoJ2Zvb3Rlck5hdicsIFtmdW5jdGlvbigpe1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0ICAgIDogJ0UnLFxuICAgIHNjb3BlICAgICAgIDoge30sXG4gICAgdHJhbnNjbHVkZSAgOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsIDogJy90ZW1wbGF0ZXMvZGlyZWN0aXZlcy9mb290ZXIuaHRtbCcsXG4gICAgY29udHJvbGxlciAgOiAnRm9vdGVyQ29udHJvbGxlcidcbiAgfTtcbn1dKTtcblxuIiwiQm9va2luZy5jb250cm9sbGVyKCdIb21lQ29udHJvbGxlcicsIFsnQ29tcGFueVNlcnZpY2UnLCdSZXNlcnZhdGlvblNlcnZpY2UnLCckc2NvcGUnLCduZ0RpYWxvZycsJ0ludmVudG9yeVNlcnZpY2UnLCBmdW5jdGlvbihDb21wYW55U2VydmljZSxSZXNlcnZhdGlvblNlcnZpY2UsJHNjb3BlLG5nRGlhbG9nLEludmVudG9yeVNlcnZpY2Upe1xuICB0aGlzLmNvbXBhbnkgPSBudWxsO1xuICB0aGlzLmRhdGEgPSAnQm9va2luZyBIb21lJztcbiAgdmFyIF9zZWxmID0gdGhpcztcblxuICBDb21wYW55U2VydmljZS5kYXRhKGZ1bmN0aW9uKGRhdGEpe1xuICAgIF9zZWxmLmNvbXBhbnkgPSBkYXRhO1xuICAgICAgICAgICRzY29wZS5xdWVyeSA9IHtcblx0XHRcdCAgICAgICAgYWR1bHRzOiAxLFxuXHRcdFx0ICAgICAgICBjaGlsZHM6IDAsXG5cdFx0XHQgICAgICAgIGNoZWNrX2luOiBuZXcgbW9tZW50KCkudG9EYXRlKCksXG5cdFx0XHQgICAgICAgIGNoZWNrX291dDogbmV3IG1vbWVudCgpLmFkZCgzLCAnZGF5cycpLnRvRGF0ZSgpXG5cdFx0XHQgICAgICB9O1xuXG5cdFx0XHQgICBcblx0XHRcdCAgICAgICAgSW52ZW50b3J5U2VydmljZS5xdWVyeSgkc2NvcGUucXVlcnksIGZ1bmN0aW9uKHJlc3VsdHMpe1xuXHRcdFx0ICAgICAgICAgICRzY29wZS5hdmFpbGFiaWxpdHk9cmVzdWx0cztcblx0XHRcdCAgICAgICBcblx0XHRcdCAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIFxuXG5cbiAgfSk7XG5cbiAgICAgICAgUmVzZXJ2YXRpb25TZXJ2aWNlLnBlbmRpbmdSZXNlcnZhdGlvbnMoKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpeyBcbiAgICAgICAgICAgICAgICAgIFx0JHNjb3BlLnBlbmRpbmdDb25maXJtYXRpb249ZGF0YS5yZXN1bHQ7XG5cdFx0XHQgICB9KVxuXHRcdCAgIC5lcnJvcihmdW5jdGlvbihkYXRhKSB7XG5cdFx0ICAgXG4gICAgICAgICAgICBcdCRzY29wZS5wZW5kaW5nQ29uZmlybWF0aW9uPVtdO1xuXG5cdFx0ICAgICB9KTtcbiAgICBcbiAgICAgICBSZXNlcnZhdGlvblNlcnZpY2UuVG9kYXljaGVja2lucygpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSl7IFxuICAgICAgICAgICAgICAgICBcdCRzY29wZS5Ub2RheWNoZWNraW5zPWRhdGEucmVzdWx0O1xuXHRcdFx0ICAgfSlcblx0XHQgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgXHQkc2NvcGUuVG9kYXljaGVja2lucz1bXTtcblxuXHRcdCAgICAgfSk7XG5cblxuICAgICAgUmVzZXJ2YXRpb25TZXJ2aWNlLlRvZGF5Y2hlY2tvdXRzKClcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKXsgXG4gICAgICAgICAgICAgICAgIFx0JHNjb3BlLlRvZGF5Y2hlY2tvdXRzPWRhdGEucmVzdWx0O1xuXHRcdFx0ICAgfSlcblx0XHQgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgXHQkc2NvcGUuVG9kYXljaGVja291dHM9W107XG5cblx0XHQgICAgIH0pO1xuXG4gICAgICAgICAgUmVzZXJ2YXRpb25TZXJ2aWNlLkd1ZXN0Q2hlY2tlZGluKClcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKXsgXG4gICAgICAgICAgICAgICAgIFx0JHNjb3BlLkd1ZXN0Q2hlY2tlZGluPWRhdGEucmVzdWx0O1xuXHRcdFx0ICAgfSlcblx0XHQgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgXHQkc2NvcGUuR3Vlc3RDaGVja2VkaW49W107XG5cblx0XHQgICAgIH0pO1xuXG5cblx0XHQgJHNjb3BlLnZpZXdkZXRhaWxzID1mdW5jdGlvbihjdXN0b21lcil7XG4gICAgICAgICAgICAgJHNjb3BlLmN1c3Q9Y3VzdG9tZXI7XG4gICAgICAgICAgICAgICAgbmdEaWFsb2cub3BlbkNvbmZpcm0oe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJ2N1c3RvbWVydG1wbCcsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ25nZGlhbG9nLXRoZW1lLWRlZmF1bHQnLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgICAgICAgICAgICAgIFx0UmVzZXJ2YXRpb25TZXJ2aWNlLmNvbmZpcm1SZXNlcnZhdGlvbigkc2NvcGUuY3VzdClcbiAgICAgICAgICAgICAgICBcdCAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpeyBcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgbmdEaWFsb2cub3Blbih7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPHA+UmVzZXJ2YXRpb24gVXBkYXRlZDwvcD4nLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFpbjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wZW5kaW5nQ29uZmlybWF0aW9uLnNwbGljZSgkc2NvcGUucGVuZGluZ0NvbmZpcm1hdGlvbi5pbmRleE9mKCRzY29wZS5jdXN0KSwxKTtcblxuXHRcdFx0XHRcdFx0ICAgfSlcblx0XHRcdFx0XHQgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdCAgIFx0ICAgICAgbmdEaWFsb2cub3Blbih7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxwPkVycm9yIFVwZGF0aW5nIFJlc2VydmF0aW9uIDwvcD4nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhaW46IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblx0XHRcdFx0XHQgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICB9ICAgICAgIFxuXG5cblx0XHQgJHNjb3BlLmNoZWNraW4gPWZ1bmN0aW9uKGN1c3RvbWVyKXtcbiAgICAgICAgICAgICAkc2NvcGUuY2xpZW50PWN1c3RvbWVyO1xuICAgICAgICAgICAgICAgIG5nRGlhbG9nLm9wZW5Db25maXJtKHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICdjaGVja2lubXBsJyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbmdkaWFsb2ctdGhlbWUtZGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiAkc2NvcGVcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgICAgICAgICAgICAgXHRSZXNlcnZhdGlvblNlcnZpY2UuY29uZmlybUNoZWNraW4oJHNjb3BlLmNsaWVudClcbiAgICAgICAgICAgICAgICBcdCAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpeyBcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgbmdEaWFsb2cub3Blbih7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPHA+Q2xpZW50IFJlc2VydmF0aW9uIFVwZGF0ZWQgdG8gQ2hlY2tlZCBpbiA8L3A+Jyxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhaW46IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuVG9kYXljaGVja2lucy5zcGxpY2UoJHNjb3BlLlRvZGF5Y2hlY2tpbnMuaW5kZXhPZigkc2NvcGUuY2xpZW50KSwxKTtcblxuXHRcdFx0XHRcdFx0ICAgfSlcblx0XHRcdFx0XHQgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdCAgIFx0ICAgICAgbmdEaWFsb2cub3Blbih7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxwPkVycm9yIFVwZGF0aW5nIENsaWVudCBSZXNlcnZhdGlvbiBTdGF0dXM8L3A+Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWluOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cdFx0XHRcdFx0ICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgfSAgICBcblxuXG4gICAgICAgJHNjb3BlLmNoZWNrb3V0ID1mdW5jdGlvbihjdXNtKXtcbiAgICAgICAgICAgICAkc2NvcGUuY2hlY2tvdXQ9Y3VzbTtcbiAgICAgICAgICAgICAgICBuZ0RpYWxvZy5vcGVuQ29uZmlybSh7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnY2hlY2tvdXRtcGwnLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICduZ2RpYWxvZy10aGVtZS1kZWZhdWx0JyxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZVxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICBcdFJlc2VydmF0aW9uU2VydmljZS5jb25maXJtQ2hlY2tvdXQoJHNjb3BlLmNoZWNrb3V0KVxuICAgICAgICAgICAgICAgIFx0ICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSl7IFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICBuZ0RpYWxvZy5vcGVuKHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8cD5DbGllbnQgUmVzZXJ2YXRpb24gVXBkYXRlZCB0byBDaGVja2VkLU9VVCA8L3A+Jyxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhaW46IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuVG9kYXljaGVja291dHMuc3BsaWNlKCRzY29wZS5Ub2RheWNoZWNrb3V0cy5pbmRleE9mKCRzY29wZS5jaGVja291dCksMSk7XG5cblx0XHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdFx0ICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0XHQgICBcdCAgICAgIG5nRGlhbG9nLm9wZW4oe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8cD5FcnJvciBVcGRhdGluZyBDbGllbnQgUmVzZXJ2YXRpb24gU3RhdHVzPC9wPicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFpbjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHRcdFx0XHRcdCAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgIH0gIDsgICAgIFxuICAgXG5cbiAgIFxuXG5cblxuXG59XSk7XG4iLCJCb29raW5nLmRpcmVjdGl2ZSgnZXJyU3JjJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICBlbGVtZW50LmJpbmQoJ2Vycm9yJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRycy5zcmMgIT0gYXR0cnMuZXJyU3JjKSB7XHJcbiAgICAgICAgICAgICAgYXR0cnMuJHNldCgnc3JjJywgYXR0cnMuZXJyU3JjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKCduZ1NyYycsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICghdmFsdWUgJiYgYXR0cnMuZXJyU3JjKSB7XHJcbiAgICAgICAgICAgICAgYXR0cnMuJHNldCgnc3JjJywgYXR0cnMuZXJyU3JjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTsiLCIgICAgQm9va2luZy5kaXJlY3RpdmUoXCJuZ0ZpbGVNb2RlbFwiLCBbZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgICAgICBuZ0ZpbGVNb2RlbDogXCI9XCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmJpbmQoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGNoYW5nZUV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChsb2FkRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLm5nRmlsZU1vZGVsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNb2RpZmllZDogY2hhbmdlRXZlbnQudGFyZ2V0LmZpbGVzWzBdLmxhc3RNb2RpZmllZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TW9kaWZpZWREYXRlOiBjaGFuZ2VFdmVudC50YXJnZXQuZmlsZXNbMF0ubGFzdE1vZGlmaWVkRGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjaGFuZ2VFdmVudC50YXJnZXQuZmlsZXNbMF0ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBjaGFuZ2VFdmVudC50YXJnZXQuZmlsZXNbMF0uc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBjaGFuZ2VFdmVudC50YXJnZXQuZmlsZXNbMF0udHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBsb2FkRXZlbnQudGFyZ2V0LnJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGNoYW5nZUV2ZW50LnRhcmdldC5maWxlc1swXSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1dKTsiLCJCb29raW5nLmNvbnRyb2xsZXIoJ0xlZnROYXZDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpe1xufV0pO1xuXG4iLCJCb29raW5nLmRpcmVjdGl2ZSgncXVlcnknLCBbJyRyb290U2NvcGUnLCAnZGF0ZUZpbHRlcicsJyRsb2NhdGlvbicgLGZ1bmN0aW9uKCRyb290U2NvcGUsIGRhdGVGaWx0ZXIsJGxvY2F0aW9uKXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdCAgICA6ICdFJyxcbiAgICB0ZW1wbGF0ZVVybCA6ICcvdGVtcGxhdGVzL2RpcmVjdGl2ZXMvcXVlcnkuaHRtbCcsXG4gICAgY29udHJvbGxlciAgOiBbJyRzY29wZScsICdJbnZlbnRvcnlTZXJ2aWNlJywgZnVuY3Rpb24oJHNjb3BlLCBJbnZlbnRvcnlTZXJ2aWNlKXtcbiAgICAgICRzY29wZS5tYXhfYWR1bHRzID0gWzEsMiwzXTtcbiAgICAgICRzY29wZS5tYXhfY2hpbGRzID0gWzAsMSwyLDNdO1xuICAgICAgJHNjb3BlLnF1ZXJ5ID0ge1xuICAgICAgICBhZHVsdHM6IDEsXG4gICAgICAgIGNoaWxkczogMCxcbiAgICAgICAgY2hlY2tfaW46IG5ldyBtb21lbnQoKS50b0RhdGUoKSxcbiAgICAgICAgY2hlY2tfb3V0OiBuZXcgbW9tZW50KCkuYWRkKDMsICdkYXlzJykudG9EYXRlKClcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpe1xuICAgICAgICBJbnZlbnRvcnlTZXJ2aWNlLnF1ZXJ5KCRzY29wZS5xdWVyeSwgZnVuY3Rpb24ocmVzdWx0cyl7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdxdWVyeTpyZXN1bHRzJyk7XG4gICAgICAgIH0pO1xuICAgICAgICAgICAgIHZhciBkZXQ9YnRvYShhbmd1bGFyLnRvSnNvbigkc2NvcGUucXVlcnkpKTtcbiAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2Jvb2tpbmcvJytkZXQpO1xuICAgICAgfVxuICAgIH1dXG4gIH07XG59XSk7XG5cbiIsIkJvb2tpbmcuZGlyZWN0aXZlKCdyZXNOYXYnLCBbZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdCAgICA6ICdFJyxcbiAgICBzY29wZSAgICAgICA6IHt9LFxuICAgIHRyYW5zY2x1ZGUgIDogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybCA6ICcvdGVtcGxhdGVzL2RpcmVjdGl2ZXMvcmVzLW5hdi5odG1sJyxcbiAgICBjb250cm9sbGVyICA6ICdSZXNDb250cm9sbGVyJ1xuICB9O1xufV0pO1xuXG4iLCJCb29raW5nLmRpcmVjdGl2ZSgndG9wTmF2JywgW2Z1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3QgICAgOiAnRScsXG4gICAgc2NvcGUgICAgICAgOiB7fSxcbiAgICB0cmFuc2NsdWRlICA6IHRydWUsXG4gICAgdGVtcGxhdGVVcmwgOiAnL3RlbXBsYXRlcy9kaXJlY3RpdmVzL2hlYWRlci5odG1sJyxcbiAgICBjb250cm9sbGVyICA6ICdIZWFkZXJDb250cm9sbGVyJ1xuICB9O1xufV0pO1xuXG4iLCJCb29raW5nLmRpcmVjdGl2ZSgndXNlcl9wcm9maWxlJywgW2Z1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3QgICAgOiAnRScsXG4gICAgdGVtcGxhdGVVcmwgOiAnL3RlbXBsYXRlcy91c2VyX3Byb2ZpbGUuaHRtbCdcbiAgfTtcbn1dKTtcbiIsIkJvb2tpbmcuY29udHJvbGxlcignQWRtaW5JbnZlbnRvcnlDb250cm9sbGVyJywgWyckcm9vdFNjb3BlJywgJ0ludmVudG9yeVNlcnZpY2UnLCduZ0RpYWxvZycsJyRzY29wZScsIGZ1bmN0aW9uKCRyb290U2NvcGUsIEludmVudG9yeVNlcnZpY2UsbmdEaWFsb2csJHNjb3BlKXtcclxuICB0aGlzLnJlc3VsdHMgPSBJbnZlbnRvcnlTZXJ2aWNlLnJlc3VsdHM7XHJcblxyXG4gICRyb290U2NvcGUuJG9uKCdxdWVyeTpyZXN1bHRzJywgZnVuY3Rpb24oKXtcclxuICAgIHRoaXMucmVzdWx0cyA9IEludmVudG9yeVNlcnZpY2UucmVzdWx0cztcclxuICB9LmJpbmQodGhpcykpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgIEludmVudG9yeVNlcnZpY2UuZ2V0Um9vbXMoZnVuY3Rpb24ocmVzdWx0cyl7XHJcblxyXG5cdFx0XHQgICAgICAgICAgJHNjb3BlLnJvb21zPXJlc3VsdHMucmVzdWx0O1xyXG5cdFx0XHQgICAgICAgXHJcblx0XHRcdCAgICAgICAgfSk7XHJcblxyXG4gJHNjb3BlLnZpZXdyb29tPWZ1bmN0aW9uKHJvb20pe1xyXG4gICRzY29wZS5yb29tPXJvb207XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nRGlhbG9nLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICdyb29tdG1wbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICduZ2RpYWxvZy10aGVtZS1kZWZhdWx0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gfTtcclxuICAkc2NvcGUuYWRkUm9vbT1mdW5jdGlvbigpe1xyXG5cclxuICAgICAgXHRuZ0RpYWxvZy5vcGVuQ29uZmlybSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICdhZGRyb29tc3RtcGwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ25nZGlhbG9nLXRoZW1lLWRlZmF1bHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJlQ2xvc2VDYWxsYmFjazogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNsb3NlIHdpdGhvdXQgc2F2aW5nIHlvdXIgY2hhbmdlcz8nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBcdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm9vbT12YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJvb20uc3RhdHVzPVwiQWN0aXZlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgXHRJbnZlbnRvcnlTZXJ2aWNlLmFkZFJvb20oJHNjb3BlLnJvb20sZnVuY3Rpb24ocmVzdWx0cyl7XHJcbiAgICAgICAgICAgICAgICBcdFx0Y29uc29sZS5sb2cocmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgICBcdFx0ICBpZiAocmVzdWx0cy5zdGF0dXM9PVwic3VjY2Vzc1wiKXsgdmFyIHRlbXAgPSc8cD5Sb29tIFN1Y2Nlc3NmdWxseSBDcmVhdGVkPC9wPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yb29tcy5wdXNoKCRzY29wZS5yb29tKTtcclxuICAgICAgICAgICAgICAgIFx0XHR9XHJcbiAgICAgICAgICAgICAgICBcdFx0ICBlbHNleyB2YXIgdGVtcCA9JzxwPkVycm9yIFNhdmluZyBSb29tPC9wPic7fVxyXG4gICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nRGlhbG9nLm9wZW4oe1xyXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wLFxyXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWluOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IFxyXG5cclxuXHRcdFx0ICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgXHQgXHJcbiAgICAgICAgICAgICAgICBcdFxyXG5cclxuICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgfVxyXG5cclxufV0pO1xyXG4iLCJCb29raW5nLmNvbnRyb2xsZXIoJ0NhbGVuZGFyQ29udHJvbGxlcicsIFsnJHNjb3BlJywnJGNvbXBpbGUnLCd1aUNhbGVuZGFyQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCRjb21waWxlLHVpQ2FsZW5kYXJDb25maWcpe1xyXG4gLyogY29uZmlnIG9iamVjdCAqL1xyXG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgdmFyIGQgPSBkYXRlLmdldERhdGUoKTtcclxuICAgIHZhciBtID0gZGF0ZS5nZXRNb250aCgpO1xyXG4gICAgdmFyIHkgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBcclxuICAgICRzY29wZS5jaGFuZ2VUbyA9ICdIdW5nYXJpYW4nO1xyXG4gICAgLyogZXZlbnQgc291cmNlIHRoYXQgcHVsbHMgZnJvbSBnb29nbGUuY29tICovXHJcbiAgICAkc2NvcGUuZXZlbnRTb3VyY2UgPSB7XHJcbiAgICAgICAgICAgIHVybDogXCJodHRwOi8vd3d3Lmdvb2dsZS5jb20vY2FsZW5kYXIvZmVlZHMvdXNhX19lbiU0MGhvbGlkYXkuY2FsZW5kYXIuZ29vZ2xlLmNvbS9wdWJsaWMvYmFzaWNcIixcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZ2NhbC1ldmVudCcsICAgICAgICAgICAvLyBhbiBvcHRpb24hXHJcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lem9uZTogJ0FtZXJpY2EvQ2hpY2FnbycgLy8gYW4gb3B0aW9uIVxyXG4gICAgfTtcclxuXHJcblxyXG5cclxuICAgJHNjb3BlLmV2ZW50cyA9IFtcclxuICAgICAge3RpdGxlOiAnQWxsIERheSBFdmVudCcsc3RhcnQ6IG5ldyBEYXRlKHksIG0sIDEpfSxcclxuICAgICAge3RpdGxlOiAnTG9uZyBFdmVudCcsc3RhcnQ6IG5ldyBEYXRlKHksIG0sIGQgLSA1KSxlbmQ6IG5ldyBEYXRlKHksIG0sIGQgLSAyKX0sXHJcbiAgICAgIHtpZDogOTk5LHRpdGxlOiAnUmVwZWF0aW5nIEV2ZW50JyxzdGFydDogbmV3IERhdGUoeSwgbSwgZCAtIDMsIDE2LCAwKSxhbGxEYXk6IGZhbHNlfSxcclxuICAgICAge2lkOiA5OTksdGl0bGU6ICdSZXBlYXRpbmcgRXZlbnQnLHN0YXJ0OiBuZXcgRGF0ZSh5LCBtLCBkICsgNCwgMTYsIDApLGFsbERheTogZmFsc2V9LFxyXG4gICAgICB7dGl0bGU6ICdCaXJ0aGRheSBQYXJ0eScsc3RhcnQ6IG5ldyBEYXRlKHksIG0sIGQgKyAxLCAxOSwgMCksZW5kOiBuZXcgRGF0ZSh5LCBtLCBkICsgMSwgMjIsIDMwKSxhbGxEYXk6IGZhbHNlfSxcclxuICAgICAge3RpdGxlOiAnQ2xpY2sgZm9yIEdvb2dsZScsc3RhcnQ6IG5ldyBEYXRlKHksIG0sIDI4KSxlbmQ6IG5ldyBEYXRlKHksIG0sIDI5KSx1cmw6ICdodHRwOi8vZ29vZ2xlLmNvbS8nfVxyXG4gICAgXTtcclxuXHJcblxyXG4gICAgIC8qIGV2ZW50IHNvdXJjZSB0aGF0IGNhbGxzIGEgZnVuY3Rpb24gb24gZXZlcnkgdmlldyBzd2l0Y2ggKi9cclxuICAgICRzY29wZS5ldmVudHNGID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIHRpbWV6b25lLCBjYWxsYmFjaykge1xyXG4gICAgICB2YXIgcyA9IG5ldyBEYXRlKHN0YXJ0KS5nZXRUaW1lKCkgLyAxMDAwO1xyXG4gICAgICB2YXIgZSA9IG5ldyBEYXRlKGVuZCkuZ2V0VGltZSgpIC8gMTAwMDtcclxuICAgICAgdmFyIG0gPSBuZXcgRGF0ZShzdGFydCkuZ2V0TW9udGgoKTtcclxuICAgICAgdmFyIGV2ZW50cyA9IFt7dGl0bGU6ICdGZWVkIE1lICcgKyBtLHN0YXJ0OiBzICsgKDUwMDAwKSxlbmQ6IHMgKyAoMTAwMDAwKSxhbGxEYXk6IGZhbHNlLCBjbGFzc05hbWU6IFsnY3VzdG9tRmVlZCddfV07XHJcbiAgICAgIGNhbGxiYWNrKGV2ZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5jYWxFdmVudHNFeHQgPSB7XHJcbiAgICAgICBjb2xvcjogJyNmMDAnLFxyXG4gICAgICAgdGV4dENvbG9yOiAneWVsbG93JyxcclxuICAgICAgIGV2ZW50czogWyBcclxuICAgICAgICAgIHt0eXBlOidwYXJ0eScsdGl0bGU6ICdMdW5jaCcsc3RhcnQ6IG5ldyBEYXRlKHksIG0sIGQsIDEyLCAwKSxlbmQ6IG5ldyBEYXRlKHksIG0sIGQsIDE0LCAwKSxhbGxEYXk6IGZhbHNlfSxcclxuICAgICAgICAgIHt0eXBlOidwYXJ0eScsdGl0bGU6ICdMdW5jaCAyJyxzdGFydDogbmV3IERhdGUoeSwgbSwgZCwgMTIsIDApLGVuZDogbmV3IERhdGUoeSwgbSwgZCwgMTQsIDApLGFsbERheTogZmFsc2V9LFxyXG4gICAgICAgICAge3R5cGU6J3BhcnR5Jyx0aXRsZTogJ0NsaWNrIGZvciBHb29nbGUnLHN0YXJ0OiBuZXcgRGF0ZSh5LCBtLCAyOCksZW5kOiBuZXcgRGF0ZSh5LCBtLCAyOSksdXJsOiAnaHR0cDovL2dvb2dsZS5jb20vJ31cclxuICAgICAgICBdXHJcbiAgICB9O1xyXG4gICAgLyogYWxlcnQgb24gZXZlbnRDbGljayAqL1xyXG4gICAgJHNjb3BlLmFsZXJ0T25FdmVudENsaWNrID0gZnVuY3Rpb24oIGRhdGUsIGpzRXZlbnQsIHZpZXcpe1xyXG4gICAgICAgICRzY29wZS5hbGVydE1lc3NhZ2UgPSAoZGF0ZS50aXRsZSArICcgd2FzIGNsaWNrZWQgJyk7XHJcbiAgICB9O1xyXG4gICAgLyogYWxlcnQgb24gRHJvcCAqL1xyXG4gICAgICRzY29wZS5hbGVydE9uRHJvcCA9IGZ1bmN0aW9uKGV2ZW50LCBkZWx0YSwgcmV2ZXJ0RnVuYywganNFdmVudCwgdWksIHZpZXcpe1xyXG4gICAgICAgJHNjb3BlLmFsZXJ0TWVzc2FnZSA9ICgnRXZlbnQgRHJvcGVkIHRvIG1ha2UgZGF5RGVsdGEgJyArIGRlbHRhKTtcclxuICAgIH07XHJcbiAgICAvKiBhbGVydCBvbiBSZXNpemUgKi9cclxuICAgICRzY29wZS5hbGVydE9uUmVzaXplID0gZnVuY3Rpb24oZXZlbnQsIGRlbHRhLCByZXZlcnRGdW5jLCBqc0V2ZW50LCB1aSwgdmlldyApe1xyXG4gICAgICAgJHNjb3BlLmFsZXJ0TWVzc2FnZSA9ICgnRXZlbnQgUmVzaXplZCB0byBtYWtlIGRheURlbHRhICcgKyBkZWx0YSk7XHJcbiAgICB9O1xyXG4gICAgXHJcblxyXG4gICAgLyogYWRkIGN1c3RvbSBldmVudCovXHJcbiAgICAkc2NvcGUuYWRkRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgJHNjb3BlLmV2ZW50cy5wdXNoKHtcclxuICAgICAgICB0aXRsZTogJ09wZW4gU2VzYW1lJyxcclxuICAgICAgICBzdGFydDogbmV3IERhdGUoeSwgbSwgMjgpLFxyXG4gICAgICAgIGVuZDogbmV3IERhdGUoeSwgbSwgMjkpLFxyXG4gICAgICAgIGNsYXNzTmFtZTogWydvcGVuU2VzYW1lJ11cclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyogcmVtb3ZlIGV2ZW50ICovXHJcbiAgICAkc2NvcGUucmVtb3ZlID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgJHNjb3BlLmV2ZW50cy5zcGxpY2UoaW5kZXgsMSk7XHJcbiAgICB9O1xyXG4gICAgLyogQ2hhbmdlIFZpZXcgKi9cclxuICAgICRzY29wZS5jaGFuZ2VWaWV3ID0gZnVuY3Rpb24odmlldyxjYWxlbmRhcikge1xyXG4gICAgICB1aUNhbGVuZGFyQ29uZmlnLmNhbGVuZGFyc1tjYWxlbmRhcl0uZnVsbENhbGVuZGFyKCdjaGFuZ2VWaWV3Jyx2aWV3KTtcclxuICAgIH07XHJcbiAgICAvKiBDaGFuZ2UgVmlldyAqL1xyXG4gICAgJHNjb3BlLnJlbmRlckNhbGVuZGVyID0gZnVuY3Rpb24oY2FsZW5kYXIpIHtcclxuICAgICAgaWYodWlDYWxlbmRhckNvbmZpZy5jYWxlbmRhcnNbY2FsZW5kYXJdKXtcclxuICAgICAgICB1aUNhbGVuZGFyQ29uZmlnLmNhbGVuZGFyc1tjYWxlbmRhcl0uZnVsbENhbGVuZGFyKCdyZW5kZXInKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgICAvKiBSZW5kZXIgVG9vbHRpcCAqL1xyXG4gICAgJHNjb3BlLmV2ZW50UmVuZGVyID0gZnVuY3Rpb24oIGV2ZW50LCBlbGVtZW50LCB2aWV3ICkgeyBcclxuICAgICAgICBlbGVtZW50LmF0dHIoeyd0b29sdGlwJzogZXZlbnQudGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICd0b29sdGlwLWFwcGVuZC10by1ib2R5JzogdHJ1ZX0pO1xyXG4gICAgICAgICRjb21waWxlKGVsZW1lbnQpKCRzY29wZSk7XHJcbiAgICB9O1xyXG4gICAgLyogY29uZmlnIG9iamVjdCAqL1xyXG4gICAgJHNjb3BlLnVpQ29uZmlnID0ge1xyXG4gICAgICBjYWxlbmRhcjp7XHJcbiAgICAgICAgaGVpZ2h0OiA0NTAsXHJcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICAgICAgaGVhZGVyOntcclxuICAgICAgICAgIGxlZnQ6ICd0aXRsZScsXHJcbiAgICAgICAgICBjZW50ZXI6ICcnLFxyXG4gICAgICAgICAgcmlnaHQ6ICd0b2RheSBwcmV2LG5leHQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBldmVudENsaWNrOiAkc2NvcGUuYWxlcnRPbkV2ZW50Q2xpY2ssXHJcbiAgICAgICAgZXZlbnREcm9wOiAkc2NvcGUuYWxlcnRPbkRyb3AsXHJcbiAgICAgICAgZXZlbnRSZXNpemU6ICRzY29wZS5hbGVydE9uUmVzaXplLFxyXG4gICAgICAgIGV2ZW50UmVuZGVyOiAkc2NvcGUuZXZlbnRSZW5kZXJcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgXHJcbiAgICAvKiBldmVudCBzb3VyY2VzIGFycmF5Ki9cclxuICAgICRzY29wZS5ldmVudFNvdXJjZXMgPSBbJHNjb3BlLmV2ZW50cywgJHNjb3BlLmV2ZW50U291cmNlLCAkc2NvcGUuZXZlbnRzRl07XHJcbiAgICAkc2NvcGUuZXZlbnRTb3VyY2VzMiA9IFskc2NvcGUuY2FsRXZlbnRzRXh0LCAkc2NvcGUuZXZlbnRzRiwgJHNjb3BlLmV2ZW50c107XHJcbn1dKTsiLCJCb29raW5nLmNvbnRyb2xsZXIoJ2NvbmZpcm1hdGlvbkNvbnRyb2xsZXInLCBbJ0RhdGFTZXJ2aWNlJywnJGxvY2F0aW9uJywnJHNjb3BlJywnUmVzZXJ2YXRpb25TZXJ2aWNlJywgZnVuY3Rpb24oRGF0YVNlcnZpY2UsJGxvY2F0aW9uLCRzY29wZSxSZXNlcnZhdGlvblNlcnZpY2Upe1xuICAgJHNjb3BlLmZvcm1EYXRhPURhdGFTZXJ2aWNlLmdldCgpOyAgICAgXG4gICAkc2NvcGUuZ3Vlc3RpbmZvPSBfLmZpbmRXaGVyZSgkc2NvcGUuZm9ybURhdGEsIHtpZDpcImd1ZXN0aW5mb1wifSkuY3VzdG9tZXJQcm9maWxlO1xuICAgJHNjb3BlLmNhcmRpbmZvPV8uZmluZFdoZXJlKCRzY29wZS5mb3JtRGF0YSwge2lkOlwicGF5bWVudGluZm9cIn0pLnBheW1lbnREZXRhaWxzO1xuICAgJHNjb3BlLmJvb2tpbmdpbmZvPV8uZmluZFdoZXJlKCRzY29wZS5mb3JtRGF0YSwge2lkOlwiYm9va2luZ2luZm9cIn0pLnNlbGVjdGVkcm9vbXM7XG4gICAgJHNjb3BlLmd1ZXN0U3VtbWFyeT1fLmZpbmRXaGVyZSgkc2NvcGUuZm9ybURhdGEsIHtpZDpcImJvb2tpbmdpbmZvXCJ9KS5xdWVycnk7XG4gICAgJHNjb3BlLnJvb21zU3VtbWFyeT1fLmZpbmRXaGVyZSgkc2NvcGUuZm9ybURhdGEsIHtpZDpcInJvb21pbmZvXCJ9KS5zdW1tYXJ5O1xuICAgJHNjb3BlLmNvbXBhbnlfaWQ9Xy5maW5kV2hlcmUoJHNjb3BlLmZvcm1EYXRhLCB7aWQ6XCJib29raW5naW5mb1wifSkuY29tcGFueWlkO1xuXG4gICBcblxuICAgJHNjb3BlLnByb2Nlc3NGb3JtPWZ1bmN0aW9uKCl7XG4gICAgdmFyIGRhdGEgPXt9O1xuICAgICAgICBkYXRhLmd1ZXN0aW5mbz0kc2NvcGUuZ3Vlc3RpbmZvO1xuICAgICAgICBkYXRhLmNhcmRpbmZvPSRzY29wZS5jYXJkaW5mbztcbiAgICAgICAgZGF0YS5ib29raW5naW5mbz0kc2NvcGUuYm9va2luZ2luZm87XG4gICAgICAgICBkYXRhLmd1ZXN0U3VtbWFyeT0kc2NvcGUuZ3Vlc3RTdW1tYXJ5O1xuICAgICAgICAgZGF0YS5yb29tU3VtbWFyeT0kc2NvcGUucm9vbXNTdW1tYXJ5O1xuICAgICAgICAgZGF0YS5jb21wYW55X2lkPSRzY29wZS5jb21wYW55X2lkO1xuXG5cbiAgICAgUmVzZXJ2YXRpb25TZXJ2aWNlLmNyZWF0ZShkYXRhKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcCkge1xuICAgICAgICAgICAgICAvLyAgYWxlcnQocmVzcC5zdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1EYXRhPVwiXCI7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy90aGFua25vdGUvJytyZXNwLnN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vY2xlYXIgZGF0YSBzZXJ2aWNlIGRhdGFcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIkVycnJvciBcIityZXNwKTtcbiAgICAgICAgICAgIH0pOyAgXG5cbiAgIH07XG4gICBcblxufV0pOyIsIkJvb2tpbmcuY29udHJvbGxlcignRm9vdGVyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKXtcbn1dKTtcblxuIiwiQm9va2luZy5jb250cm9sbGVyKCdndWVzdENvbnRyb2xsZXInLCBbJ0RhdGFTZXJ2aWNlJywnJHN0YXRlJywnJHNjb3BlJywgZnVuY3Rpb24oRGF0YVNlcnZpY2UsJHN0YXRlLCRzY29wZSl7XG4gICAkc2NvcGUuZm9ybURhdGE9e307XG5cblxuICAgJHNjb3BlLnBheW1lbnQ9ZnVuY3Rpb24oKXtcblxuXHQgICBcdCB2YXIgZGF0YT17fTtcblx0ICAgXHQgZGF0YS5pZD0nZ3Vlc3RpbmZvJztcblx0ICAgXHQgZGF0YS5jdXN0b21lclByb2ZpbGU9JHNjb3BlLmZvcm1EYXRhO1xuXHQgICBcdERhdGFTZXJ2aWNlLnNhdmUoZGF0YSk7XG5cdCAgIFx0JHN0YXRlLmdvKCdwYXltZW50Jyk7XG4gICB9O1xuXG59XSk7IiwiQm9va2luZy5jb250cm9sbGVyKCdIZWFkZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpe1xufV0pO1xuXG4iLCJCb29raW5nLmNvbnRyb2xsZXIoJ0xvZ291dENvbnRyb2xsZXInLCBbJyRsb2NhdGlvbicsICdMb2dpblNlcnZpY2UnLCBmdW5jdGlvbigkbG9jYXRpb24sIExvZ2luU2VydmljZSl7XG4gIExvZ2luU2VydmljZS5sb2dvdXQoKTtcbiAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xufV0pO1xuXG5cbiIsIkJvb2tpbmcuY29udHJvbGxlcigncGF5bWVudENvbnRyb2xsZXInLCBbJ0RhdGFTZXJ2aWNlJywnJHN0YXRlJywnJHNjb3BlJywgZnVuY3Rpb24oRGF0YVNlcnZpY2UsJHN0YXRlLCRzY29wZSl7XG4gICAkc2NvcGUuZm9ybURhdGE9e307XG5cblxuICAgJHNjb3BlLmdvdG9Db25maXJtPWZ1bmN0aW9uKCl7XG5cdCAgIFx0IHZhciBkYXRhPXt9O1xuXHQgICBcdCBkYXRhLmlkPSdwYXltZW50aW5mbyc7XG5cdCAgIFx0IGRhdGEucGF5bWVudERldGFpbHM9JHNjb3BlLmZvcm1EYXRhO1xuXHQgICBcdERhdGFTZXJ2aWNlLnNhdmUoZGF0YSk7XG5cdCAgIFx0JHN0YXRlLmdvKCdDb25maXJtYXRpb24nKTtcbiAgIH07XG5cbn1dKTsiLCJCb29raW5nLmNvbnRyb2xsZXIoJ1Jlc0NvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSl7XG59XSk7XG5cbiIsIkJvb2tpbmcuY29udHJvbGxlcignUmVzZXJ2ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsJyRzdGF0ZVBhcmFtcycsJyRzdGF0ZScsJ1Jlc2VydmF0aW9uU2VydmljZScsICdEYXRhU2VydmljZScsJyRhbmNob3JTY3JvbGwnLCckbG9jYXRpb24nLGZ1bmN0aW9uKCRzY29wZSwkc3RhdGVQYXJhbXMsJHN0YXRlLFJlc2VydmF0aW9uU2VydmljZSxEYXRhU2VydmljZSwkYW5jaG9yU2Nyb2xsLCRsb2NhdGlvbil7XG4gICAkbG9jYXRpb24uaGFzaCgndG9wJyk7XG5cbiAgICAgIC8vIGNhbGwgJGFuY2hvclNjcm9sbCgpXG4gICAgICAkYW5jaG9yU2Nyb2xsKCk7XG5cblx0XG4gICRzY29wZS5mb3JtRGF0YSA9IHt9O1xuICRzY29wZS5mb3JtRGF0YS5yb29tRGV0YWlscz1hbmd1bGFyLmZyb21Kc29uKGF0b2IoJHN0YXRlUGFyYW1zLnJvb21kZXRhaWxzKSk7XG4gIC8vY29uc29sZS5sb2coJHNjb3BlLmZvcm1EYXRhLnJvb21EZXRhaWxzKTtcblxuICAkc2NvcGUuc3VtbWFyeT17fTtcbiAgJHNjb3BlLnN1bW1hcnkubm9Sb29tcz0kc2NvcGUuZm9ybURhdGEucm9vbURldGFpbHMuc2VsZWN0ZWRyb29tcy5sZW5ndGg7XG4gICRzY29wZS5zdW1tYXJ5Lm5vR3Vlc3Q9ICRzY29wZS5mb3JtRGF0YS5yb29tRGV0YWlscy5xdWVycnkuYWR1bHRzOyBcbiAgJHNjb3BlLnN1bW1hcnkuc3RhcnRkYXRlPSRzY29wZS5mb3JtRGF0YS5yb29tRGV0YWlscy5xdWVycnkuY2hlY2tfaW47XG4gICRzY29wZS5zdW1tYXJ5LmVuZGRhdGU9JHNjb3BlLmZvcm1EYXRhLnJvb21EZXRhaWxzLnF1ZXJyeS5jaGVja19vdXQ7XG5cbiAgJHNjb3BlLnRvdGFscHJpY2U9ZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHRwcmljZT0wO1xuICAgICAgICBcblxuICAgICAgIGZvciAodmFyIGk9MCAgO2k8JHNjb3BlLnN1bW1hcnkubm9Sb29tcztpKyspe1xuXG4gICAgICAgICAgIHRwcmljZT10cHJpY2UrJHNjb3BlLmZvcm1EYXRhLnJvb21EZXRhaWxzLnNlbGVjdGVkcm9vbXNbaV0ucm9vbS5iYXNlX3ByaWNlO1xuICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRwcmljZTtcbiAgICAgIH07XG5cblxuXG4kc2NvcGUuc3VtbWFyeS50UHJpY2U9ICRzY29wZS50b3RhbHByaWNlKCk7IFxuXG4gICAgXG4gICAgLy8gZnVuY3Rpb24gdG8gcHJvY2VzcyB0aGUgZm9ybVxuICAgICRzY29wZS5wcm9jZXNzRm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgICAgIC8vIGFsZXJ0KCdhd2Vzb21lIScpO1xuXG4gICAgICAgICAgUmVzZXJ2YXRpb25TZXJ2aWNlLmNyZWF0ZSgkc2NvcGUuZm9ybURhdGEpXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJkYXRhIHNhdmVkIFJlc2VydmF0aW9uIElEIDk4ODlcIik7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1EYXRhPVwiXCI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJycm9yIFwiK2Vycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7ICBcblxuXG4gICAgfTtcblxuXG4gICAgJHNjb3BlLnByb2NlZWQ9ZnVuY3Rpb24oKXtcbiAgICAgIHZhciBkYXRhPXt9O1xuICAgICAgICBkYXRhLmlkPSdyb29taW5mbyc7XG4gICAgICAgIGRhdGEucm9vbWRldGFpbHM9JHNjb3BlLmZvcm1EYXRhO1xuICAgICAgICBkYXRhLnN1bW1hcnk9JHNjb3BlLnN1bW1hcnk7XG4gICAgICAgICBEYXRhU2VydmljZS5zYXZlKGRhdGEpO1xuICAgICAgICAgICAkc3RhdGUuZ28oJ2d1ZXN0aW5mbycpO1xuICAgIH07XG5cbiAgICBcbn1dKTsiLCJCb29raW5nLmNvbnRyb2xsZXIoJ1Jlc2VydmVQYXltZW50Q29udHJvbGxlcicsIFsnUmVzZXJ2YXRpb25TZXJ2aWNlJywgZnVuY3Rpb24oUmVzZXJ2YXRpb25TZXJ2aWNlKXtcblxufV0pOyIsIkJvb2tpbmcuY29udHJvbGxlcignYm9va2luZ0NvbnRyb2xsZXInLCBbJ1Jlc2VydmF0aW9uU2VydmljZScsIGZ1bmN0aW9uKFJlc2VydmF0aW9uU2VydmljZSl7XG5cbn1dKTsiLCJcblxuQm9va2luZy5jb250cm9sbGVyKCd0aGFua25vdGVDb250cm9sbGVyJywgWyckbG9jYXRpb24nLCckc2NvcGUnLCckc3RhdGVQYXJhbXMnICxmdW5jdGlvbigkbG9jYXRpb24sJHNjb3BlLCRzdGF0ZVBhcmFtcyl7XG4gICAgJHNjb3BlLnJlc2VydmF0aW9uaWQ9ICRzdGF0ZVBhcmFtcy5yZXNlcnZhdGlvbmlkO1xuXG5cdH1dKTsiLCJCb29raW5nLmNvbnRyb2xsZXIoJ1VzZXJQcm9maWxlQ29udHJvbGxlcicsIFsnVXNlcnNTZXJ2aWNlJywnJHNjb3BlJywnJHJvb3RTY29wZScgLGZ1bmN0aW9uKFVzZXJzU2VydmljZSwkc2NvcGUsJHJvb3RTY29wZSl7XHJcblxyXG5cclxuICAgIFVzZXJzU2VydmljZS5nZXRVc2VyKGZ1bmN0aW9uKHJlc3VsdHMpe1xyXG5cclxuICAgIFx0Y29uc29sZS5sb2cocmVzdWx0cyk7XHJcbiAgICAgICAgICAkc2NvcGUudXNlcmRldGFpbHM9cmVzdWx0cy5yZXN1bHQ7XHJcbiAgICB9KTtcclxuXHJcbiB9XSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9